use super::ast::*;

grammar;

match {
    "if" => IF,
    "then" => THEN,
    "else" => ELSE,
    "while" => WHILE,
    "do" => DO,
    "not" => NOT,
    "and" => AND,
    "or" => OR,
    "int" => INT,
    "bool" => BOOL,
} else {
    r"\s*" => {},
    r"//[^\n\r]*[\n\r]*" => {},
    r"[a-zA-Z_][a-zA-Z0-9_]*" => ID,
    r"[0-9]+" => NUM,
    _
}

pub StmtList: Vec<Stmt> = {
    <l:StmtList> <s:Stmt> ";" => {
        let mut l = l;
        l.push(*s);
        l
    },
    <s:Stmt> ";" => vec![*s],
}

Stmt: Box<Stmt> = {
    IF <e:Expr> THEN <s:Block> => Box::new(Stmt::If(e, s)),
    IF <e:Expr> THEN <s:Block> ELSE <r:Block> => Box::new(Stmt::IfElse(e, s, r)),
    WHILE <e:Expr> DO <s:Block> => Box::new(Stmt::While(e, s)),
    <l:@L> <i:Id> <r:@R> ":=" <e:Expr> => Box::new(Stmt::Assign((i, l, r), e)),
    <t:Type> <i:IdList> => Box::new(Stmt::VarDecl(i, t)),
    <b:Block> => Box::new(Stmt::Block(b)),
    <e:Expr> => Box::new(Stmt::Expr(e)),
}

Block: Vec<Stmt> = {
    "{" <l:StmtList> "}" => l,
}

Expr: Box<Expr> = {
    <e:LogicalExpr> => e,
}

LogicalExpr: Box<Expr> = {
    <e:RelExpr> => e,
    NOT <f:Factor> => Box::new(Expr::Not(f)),
    <e:LogicalExpr> AND <r:RelExpr> => Box::new(Expr::Op(Opcode::And, e, r)),
    <e:LogicalExpr> OR <r:RelExpr> => Box::new(Expr::Op(Opcode::Or, e, r)),
}

RelExpr: Box<Expr> = {
    <e:SimpleExpr> => e,
    <e:SimpleExpr> "=" <s:SimpleExpr> => Box::new(Expr::Op(Opcode::Equal, e, s)),
    <e:SimpleExpr> "<" <s:SimpleExpr> => Box::new(Expr::Op(Opcode::LessThan, e, s)),
    <e:SimpleExpr> ">" <s:SimpleExpr> => Box::new(Expr::Op(Opcode::GreaterThan, e, s)),
}

SimpleExpr: Box<Expr> = {
    <t:Term> => t,
    <e:SimpleExpr> "+" <t:Term> => Box::new(Expr::Op(Opcode::Add, e, t)),
    <e:SimpleExpr> "-" <t:Term> => Box::new(Expr::Op(Opcode::Sub, e, t)),
}

Term: Box<Expr> = {
    <f:Factor> => f,
    <t:Term> "*" <f:Factor> => Box::new(Expr::Op(Opcode::Mul, t, f)),
}

Factor: Box<Expr> = {
    "(" <e:Expr> ")" => e,
    <left:@L> <i:Id> <right:@R> => Box::new(Expr::Id(i, left, right)),
    <n:Num> => Box::new(Expr::Num(n)),
}

Type: Type = {
    INT => Type::Int,
    BOOL => Type::Bool,
}

IdList: Vec<String> = {
    <i:Id> "," <l:IdList> => {
        let mut l = l;
        l.push(i);
        l
    },
    <i:Id> => vec![i],
}

Id: String = {
    ID => <>.to_string(),
}

Num: u32 = {
    NUM => <>.parse().unwrap(),
}
